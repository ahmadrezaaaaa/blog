name: Django CI

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.2-alpine
        env:
          POSTGRES_DB: ${{ secrets.PG_NAME }}
          POSTGRES_USER: ${{ secrets.PG_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: your-username/your-repo:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-new
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create  .env file
        run: |
          touch .env
          echo PG_NAME=${{ secrets.PG_NAME }}  >> .env
          echo PG_PASSWORD=${{ secrets.PG_PASSWORD }} >> .env
          echo PG_USERNAME=${{ secrets.PG_USERNAME }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }} >> .env
          echo CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }} >> .env
          cat .env


      - name: Start services
        run: docker-compose up -d


      #      - name: Wait for database
      #        run: dockerize -wait tcp://localhost:5432 -timeout 1m

      - name: Run migrations
        run: docker-compose run blog_app python manage.py migrate


      - name: Run tests
        run: docker-compose run blog_app python manage.py test


#      - name: Lint with flake8
#        run: docker-compose run blog_app flake8 .


      - name: Shut down
        run: docker-compose down